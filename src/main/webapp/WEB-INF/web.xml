<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

    <!--配置过滤器，设置编码格式-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <async-supported>true</async-supported>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>foreEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--Spring Config begin-->
    <!--当Web容器启动时，自动装配Spring applicationContext.xml中配置的信息-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--配置applicationContext.xml路径，用于加载Spring bean-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>
    <!--Spring Config end-->

    <!--Spring MVC Config begin-->
    <!--主要负责流程的控制-->
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:dispatcher-servlet.xml</param-value>
        </init-param>
        <!--优先级，当值大于等于0时，在Web容器启动时就会加载此Servlet，当值小于0时，只有在使用此Servlet时才会加载-->
        <load-on-startup>1</load-on-startup>
        <async-supported>true</async-supported>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
    <!--Spring MVC Config end  -->

    <!--监听HTTP请求事件，Web服务器接收的每次请求都会通知该监听器-->
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>

    <!-- JMS的ajax实现 -->
    <servlet>
        <servlet-name>AjaxServlet</servlet-name>
        <servlet-class>com.hndt.servlet.MessageCharacterServlet</servlet-class>
        <init-param>
            <param-name>maximumReadTimeout</param-name>
            <param-value>120000</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
        <async-supported>true</async-supported>
    </servlet>
    <servlet-mapping>
        <servlet-name>AjaxServlet</servlet-name>
        <url-pattern>/amq/*</url-pattern>
    </servlet-mapping>

    <!-- 启动时servlet将连接到 tcp://172.20.1.21:61616 -->
    <context-param>
        <param-name>org.apache.activemq.brokerURL</param-name>
        <param-value>tcp://172.20.1.21:61616</param-value>
    </context-param>

    <!-- 不需要启用一个嵌入式代理 -->
    <context-param>
        <param-name>org.apache.activemq.embeddedBroker</param-name>
        <param-value>false</param-value>
    </context-param>

    <filter>
        <filter-name>getContent</filter-name>
        <filter-class>com.hndt.filter.GetContentFilter</filter-class>
        <async-supported>true</async-supported>
    </filter>
    <filter-mapping>
        <filter-name>getContent</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

</web-app>
